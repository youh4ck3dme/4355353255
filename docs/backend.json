{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the fitness e-commerce platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time when the user registered.",
          "format": "date-time"
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., admin, customer)."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "registrationDate",
        "role"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the fitness e-commerce platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "category": {
          "type": "string",
          "description": "Category of the product (e.g., protein, apparel)."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "imageUrl",
        "category"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "The date and time when the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "The status of the order (e.g., pending, shipped, delivered)."
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of the product in the order item."
        },
        "price": {
          "type": "number",
          "description": "The price of the product at the time of the order."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "price"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task in the offline task manager.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "title": {
          "type": "string",
          "description": "The title of the task."
        },
        "notes": {
          "type": "string",
          "description": "Notes associated with the task."
        },
        "dueDate": {
          "type": "string",
          "description": "The due date of the task.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the task (e.g., open, in progress, completed)."
        },
        "tagIds": {
          "type": "array",
          "description": "References to Tags. (Relationship: Tag N:N Task)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "status"
      ]
    },
    "Tag": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Tag",
      "type": "object",
      "description": "Represents a tag that can be associated with tasks.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the tag."
        },
        "name": {
          "type": "string",
          "description": "The name of the tag."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "ProjectFile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProjectFile",
      "type": "object",
      "description": "Represents a file within a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the file."
        },
        "name": {
          "type": "string",
          "description": "The name of the file."
        },
        "type": {
          "type": "string",
          "description": "The type or extension of the file."
        },
        "size": {
          "type": "number",
          "description": "The size of the file in bytes."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date and time when the file was uploaded.",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "description": "The URL where the file can be accessed.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "size",
        "uploadDate",
        "url"
      ]
    },
    "ContactSubmission": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contact Submission",
      "type": "object",
      "description": "Represents a submission from the contact form.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name or company of the person submitting the form."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the person."
        },
        "email": {
          "type": "string",
          "description": "The email address of the person.",
          "format": "email"
        },
        "address": {
          "type": "string",
          "description": "The address provided by the person."
        },
        "submittedAt": {
            "type": "string",
            "description": "The date and time when the form was submitted.",
            "format": "date-time"
        }
      },
      "required": ["name", "phone", "email", "submittedAt"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  The 'userId' parameter is the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders placed by users.  'userId' indicates ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who placed the order."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores items within an order. 'userId' and 'orderId' indicate ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who placed the order."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier for the order item."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks for a specific user. 'userId' indicates ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the task."
            },
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tags/{tagId}",
        "definition": {
          "entityName": "Tag",
          "schema": {
            "$ref": "#/backend/entities/Tag"
          },
          "description": "Stores tags created by a specific user. 'userId' indicates ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who created the tag."
            },
            {
              "name": "tagId",
              "description": "The unique identifier for the tag."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projectFiles/{projectFileId}",
        "definition": {
          "entityName": "ProjectFile",
          "schema": {
            "$ref": "#/backend/entities/ProjectFile"
          },
          "description": "Stores project files for a specific user. 'userId' indicates ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the project file."
            },
            {
              "name": "projectFileId",
              "description": "The unique identifier for the project file."
            }
          ]
        }
      },
      {
        "path": "/contact_submissions/{submissionId}",
        "definition": {
          "entityName": "ContactSubmission",
          "schema": {
            "$ref": "#/backend/entities/ContactSubmission"
          },
          "description": "Stores submissions from the public contact form.",
          "params": [
            {
              "name": "submissionId",
              "description": "The unique identifier for the submission."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the FITNESS ESHOP FAST PWA application, emphasizing security, scalability, and ease of maintenance. It follows the core design principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), QAPs (Rules are not Filters) and Invariants.\n\n**Authorization Independence:**\n\n*   User-owned data (Orders, Tasks) is stored under the `/users/{userId}` path, making ownership explicit and rules simple. No `get()` calls are needed to determine ownership. Since ownership is derived from the path, authorization is independent.\n*   For collaborative data, such as associating Tags to Tasks (N:N), denormalization is used. Although the entities themselves are User owned, a more complex scenario requires a different strategy than the simple path based one for Users.\n\n**Structural Segregation:**\n*   User data, product data, and order data are stored in separate collections, each with its own security rules.\n\n**Access Modeling:**\n*   Path-Based Ownership: `/users/{userId}/orders/{orderId}` and `/users/{userId}/tasks/{taskId}`. This clearly establishes ownership and simplifies rules.\n*   Membership Map: While not explicitly used in this initial structure, if collaborative features were added, the `members: {uid: role}` pattern would be used and denormalized as needed.\n\n**QAPs (Rules Are Not Filters):**\n\nThe structure supports secure `list` operations:\n*   Listing Orders:  The rule `match /users/{userId}/orders/{orderId} { allow read: if request.auth.uid == userId; }`  allows a user to only `list` orders under their user ID (no filtering needed in the rule itself).\n*   Listing Tasks: The rule `match /users/{userId}/tasks/{taskId} { allow read: if request.auth.uid == userId; }` allows a user to only `list` tasks under their user ID. There is no need to add filtering to the rules themselves.\n\n**Invariants:**\nThe structure supports the integrity of ownership and timestamps via rules that enforce immutability after creation. Invariant rules are not included, because they are not defined on the design document."
  }
}
