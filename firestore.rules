/**
 * @file Firestore Security Rules for the FITNESS ESHOP FAST PWA application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and allows public read access to product information.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` matches the Firebase Auth UID.
 * - Products are stored under `/products/{productId}` and are publicly readable.
 * - User-specific data like orders, order items, tasks, tags, and project files are nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own data (orders, tasks, etc.).
 * - Products are publicly readable but not writable via the client (writes are implicitly disallowed).
 * - Listing of user documents is allowed only for the user themselves, for user-owned subcollections.
 * - No database-wide administrator roles are defined in this initial ruleset.
 *
 * Denormalization for Authorization:
 *  - Ownership is encoded in the path itself (e.g., `/users/{userId}/orders/{orderId}`), avoiding the need for `get()` calls to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth UID can create their profile.
     * @allow (get, list, update, delete) User with ID matching auth UID can read, update, and delete their profile.
     * @deny (create, get, list, update, delete) Any other user attempting to access this profile.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to product information.  No client-side writes are permitted.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) No user can create, update, or delete product information through the client.
     * @principle Provides public read access while preventing unauthorized data modification.
     */
    match /products/{productId} {
      allow get, list: if true;
    }

    /**
     * @description Enforces user-ownership for orders. Users can only read/write orders they own.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID matching auth UID can create orders under their profile.
     * @allow (get, list, update, delete) User with ID matching auth UID can read, update, and delete orders under their profile.
     * @deny (create, get, list, update, delete) Any other user attempting to access this order.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items. Users can only read/write order items within their own orders.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) User with ID matching auth UID can create order items under their order.
     * @allow (get, list, update, delete) User with ID matching auth UID can read, update, and delete order items under their order.
     * @deny (create, get, list, update, delete) Any other user attempting to access this order item.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for tasks. Users can only read/write tasks they own.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID matching auth UID can create tasks under their profile.
     * @allow (get, list, update, delete) User with ID matching auth UID can read, update, and delete tasks under their profile.
     * @deny (create, get, list, update, delete) Any other user attempting to access this task.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for tags. Users can only read/write tags they own.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User with ID matching auth UID can create tags under their profile.
     * @allow (get, list, update, delete) User with ID matching auth UID can read, update, and delete tags under their profile.
     * @deny (create, get, list, update, delete) Any other user attempting to access this tag.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId}/tags/{tagId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for project files. Users can only read/write project files they own.
     * @path /users/{userId}/projectFiles/{projectFileId}
     * @allow (create) User with ID matching auth UID can create project files under their profile.
     * @allow (get, list, update, delete) User with ID matching auth UID can read, update, and delete project files under their profile.
     * @deny (create, get, list, update, delete) Any other user attempting to access this project file.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId}/projectFiles/{projectFileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}