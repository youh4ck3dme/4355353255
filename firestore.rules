/**
 * @file Firestore Security Rules for the FITNESS ESHOP FAST PWA application.
 *
 * @core_philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (orders, tasks, tags, project files)
 * nested under `/users/{userId}`. Product data at the top level is publicly readable.
 *
 * @data_structure:
 * - `/users/{userId}`: Stores user profiles, where `{userId}` matches the Firebase Auth UID.
 * - `/products/{productId}`: Stores product information, publicly readable.
 * - `/users/{userId}/orders/{orderId}`: Stores orders placed by users.
 * - `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}`: Stores items within an order.
 * - `/users/{userId}/tasks/{taskId}`: Stores tasks for a specific user.
 * - `/users/{userId}/tags/{tagId}`: Stores tags created by a specific user.
 * - `/users/{userId}/projectFiles/{projectFileId}`: Stores project files for a specific user.
 *
 * @key_security_decisions:
 * - User listing is implicitly disallowed by the rules.
 * - Public read access is granted to the `/products` collection.
 *
 * @denormalization_for_authorization:
 * - User ownership is derived from the path `/users/{userId}/...`, eliminating the need for `get()` calls
 *   to check ownership. The `userId` parameter in the path is matched against `request.auth.uid`.
 *
 * @structural_segregation:
 * - User data and product data are stored in separate top-level collections to enforce different access
 *   control policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile, ensuring the ID matches their UID.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own profile.
     * @deny (create) If the userId does not match the authenticated user id.
     * @deny (get, update, delete) If the user is not the owner of the profile.
     * @principle Enforces user ownership and self-creation for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to product data.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No user can create, update, or delete product data.
     * @principle Allows public read access to product information, but restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to order data for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) Authenticated user can create orders under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, and delete their own orders.
     * @deny (create) If the userId does not match the authenticated user id.
     * @deny (get, list, update, delete) If the user is not the owner of the order.
     * @principle Enforces user ownership for order management.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId; // Enforce immutability of userId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to order items within a specific order for a user.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) Authenticated user can create order items under their own orders.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, and delete order items within their own orders.
     * @deny (create) If the userId or orderId does not match the authenticated user id or the parent order id.
     * @deny (get, list, update, delete) If the user is not the owner of the order item.
     * @principle Enforces user ownership for order item management.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.orderId == orderId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.orderId == resource.data.orderId; // Enforce immutability of orderId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to task data for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user can create tasks under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, and delete their own tasks.
     * @deny (create) If the userId does not match the authenticated user id.
     * @deny (get, list, update, delete) If the user is not the owner of the task.
     * @principle Enforces user ownership for task management.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to tag data for a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) Authenticated user can create tags under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, and delete their own tags.
     * @deny (create) If the userId does not match the authenticated user id.
     * @deny (get, list, update, delete) If the user is not the owner of the tag.
     * @principle Enforces user ownership for tag management.
     */
    match /users/{userId}/tags/{tagId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to project file data for a specific user.
     * @path /users/{userId}/projectFiles/{projectFileId}
     * @allow (create) Authenticated user can create project files under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, and delete their own project files.
     * @deny (create) If the userId does not match the authenticated user id.
     * @deny (get, list, update, delete) If the user is not the owner of the project file.
     * @principle Enforces user ownership for project file management.
     */
    match /users/{userId}/projectFiles/{projectFileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}